<?xml version="1.0"?>

<!--
  @file build.xml
  Build targets for this project. This file should be customized for your project.

  For a full list of targets, try:
    phing -l

  @see https://github.com/palantirnet/the-build
  -->

<project name="towerhealth" default="build">

    <!-- Add property loading and targets from palantirnet/the-build. -->
    <import file="vendor/palantirnet/the-build/targets/the-build.xml" />


    <!-- Make these additional targets available by default. -->
    <import file="vendor/palantirnet/the-build/targets/drupal.xml" />


    <!-- Additional optional targets. -->
    <import file="vendor/palantirnet/the-build/targets/artifact.xml" />
    <import file="vendor/palantirnet/the-build/targets/acquia.xml" />
    <import file="vendor/palantirnet/the-build/targets/styleguide.xml" />


    <!-- Default target: build -->
    <target name="build" depends="styleguide,set-site" description="Build the application.">
        <!-- Create the Drupal custom code directories. -->
        <foreach list="${drupal.create_dirs}" param="dir" target="mkdir" />

        <!-- Set permissions on the sites subdirectory. -->
        <mkdir dir="${drupal.root}/sites/${drupal.site.dir}" />
        <chmod file="${drupal.root}/sites/${drupal.site.dir}" mode="750" />

        <!-- Create the public files directory and make it world writable. -->
        <mkdir dir="${drupal.root}/${drupal.site.settings.file_public_path}" />
        <chmod file="${drupal.root}/${drupal.site.settings.file_public_path}" mode="744" />

        <!-- Create the private files directory and make it private. -->
        <mkdir dir="${drupal.root}/${drupal.site.settings.file_private_path}" />
        <chmod file="${drupal.root}/${drupal.site.settings.file_private_path}" mode="640" />

        <!-- Copy the settings.build.php and services.build.php templates into place. -->
        <copy todir="${build.dir}" overwrite="true" mode="544">
            <!-- Copy the template files -->
            <filelist dir="${build.dir}" files="${drupal.site.build.settings_template},${drupal.site.build.services_template}" />
            <!-- Map templates to their destinations -->
            <mapper type="firstmatch">
                <mapper type="glob" from="${drupal.site.build.settings_template}" to="${drupal.site.build.settings_dest}" />
                <mapper type="glob" from="${drupal.site.build.services_template}" to="${drupal.site.build.services_dest}" />
            </mapper>
            <!-- Substitute property values -->
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <!-- Include styleguide resources in the theme. This approach will symlink
             resources in development environments, and copy them for artifact builds. -->
        <phingcall target="build-styleguide" />
    </target>

    <!-- Target: install-styleguide
         Installs the styleguide
         -->
    <target name="install-styleguide">
        <exec command="composer install --no-interaction --no-scripts --optimize-autoloader --prefer-dist" dir="${styleguide.root}" />
        <exec command="yarn" dir="${styleguide.root}" />
    </target>


    <!-- Target: build-styleguide
         Builds the styleguide
         -->
    <target name="build-styleguide">
        <exec command="yarn compile" dir="${styleguide.root}" />
    </target>


    <!-- Target: install
         Running this target will also run the build target.
         -->
    <target name="install" depends="set-site,build,drupal-validate-clean-config,drupal-has-database-connection,drupal-install-if-no-config" description="Install the application.">
        <drush command="site-install" assume="yes">
            <option name="site-name">${projectname}</option>
            <option name="account-name">${drupal.site.admin_user}</option>
            <option name="account-pass">admin</option>
            <param>${drupal.site.profile}</param>
        </drush>
    </target>


    <!-- Target: build-all
         Run the build target for all configured multisites. This is the same as running:
           phing sites-run -Dtarget=build
         -->
    <target name="build-all">
        <phingcall target="sites-run">
            <property name="target" value="build" />
        </phingcall>
    </target>


    <!-- Target: install-all
         Run the install target for all configured multisites. This is the same as running:
           phing sites-run -Dtarget=install
         -->
    <target name="install-all">
        <phingcall target="sites-run">
            <property name="target" value="install" />
        </phingcall>
    </target>


    <!-- Target: migrate -->
    <target name="migrate" description="Run the migrations.">
        <echo>Configure this target to load sample data and run the migrations.</echo>
    </target>


    <!-- Target: load -->
    <target name="load" depends="set-site" description="Load a database dump.">
        <phingcall target="drupal-load-db" />
        <drush command="cache-rebuild" />
    </target>


    <!-- Target: test -->
    <target name="test" description="Run all the tests." depends="code-review,behat" />


    <!-- Target: behat -->
    <target name="behat" description="Run the Behat tests.">
        <property name="behat.command" value="vendor/bin/behat ${behat.args}" />
        <echo msg="$> ${behat.command}" />
        <exec command="${behat.command}" logoutput="true" checkreturn="true" />
    </target>


    <!-- Target: code-review -->
    <target name="code-review" description="Run the automated code reviews.">
        <!-- Run PHP's built in linter ('php -l') -->
        <phplint deprecatedAsError="true" haltonfailure="true">
            <fileset dir="${drupal.root}" includesfile="${phplint.includesfile}" />
        </phplint>

        <!-- Run PHP Code Sniffer. -->
        <property name="phpcs.command" value="vendor/bin/phpcs --standard=${phpcs.standard} --ignore=${phpcs.ignore} ${phpcs.directories}" />
        <echo msg="$> ${phpcs.command}" />
        <exec command="${phpcs.command}" logoutput="true" checkreturn="true" />

        <!-- Run PHP Mess Detector. -->
        <property name="phpmd.command" value="vendor/bin/phpmd ${phpmd.directories} ${phpmd.format} ${phpmd.rulesets} --suffixes=${phpmd.suffixes}" />
        <echo msg="$> ${phpmd.command}" />
        <exec command="${phpmd.command}" logoutput="true" checkreturn="true" />
    </target>

  
    <!-- Target: code-fix -->
    <target name="code-fix" description="Run the automated code fixer.">
        <!-- Run PHP Code Beautifier and Fixer. -->
        <property name="phpcbf.command" value="vendor/bin/phpcbf --standard=${phpcs.standard} --ignore=${phpcs.ignore} ${phpcs.directories}" />
        <echo msg="$> ${phpcbf.command}" />
        <exec command="${phpcbf.command}" logoutput="true" checkreturn="false" />
    </target>

  
    <!-- Target: artifact -->
    <target name="artifact" description="Build and deploy the application.">
        <phing phingfile="build.xml" target="artifact-main" inheritAll="false">
            <property name="build.env" value="acquia" />
        </phing>
    </target>


</project>
