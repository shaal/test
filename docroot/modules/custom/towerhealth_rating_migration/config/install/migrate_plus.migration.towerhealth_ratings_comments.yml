id: towerhealth_ratings_comments
label: Physician Rating Comments
migration_group: towerhealth
migration_tags:
  - towerhealth
dependencies:
  enforced:
    module:
      - towerhealth_rating_migration
source:
  plugin: url
  # Note -- We are loading from local file for testing. We either need:
  # a data_fetcher_plugin for HTTP POST, or a process that runs that POST and
  # writes the local file.
  # data_fetcher_plugin: http
  data_fetcher_plugin: file
  data_parser_plugin: jsonpath
  urls:
    - modules/custom/towerhealth_rating_migration/data/comments.json
  # An xpath-like selector corresponding to the items to be imported.
  item_selector: '..comments[*]'

  # This configuration is provided by the `http` data fetcher plugin.
  # Do not disclose any sensitive information in the headers.
  #headers:
  #  Accept: 'application/json; charset=utf-8'
  #  Accept-Encoding: 'gzip, deflate, br'
  #  Accept-Language: 'en-US,en;q=0.5'
  #  Custom-Key: 'understand'
  #  Arbitrary-Header: 'drupal'

  # This configuration is provided by the `digest` authentication plugin.
  # Credentials should never be saved in plain text nor committed to the repo.
  #authentication:
  #  plugin: digest
  #  username: totally
  #  password: insecure
  track_changes: true
  # Under 'fields', we list the data items to be imported. The first level keys
  # are the source field names we want to populate (the names to be used as
  # sources in the process configuration below). For each field we're importing,
  # we provide a label (optional - this is for display in migration tools) and
  # an xpath for retrieving that value. It's important to note that this xpath
  # is relative to the elements retrieved by item_selector.
  fields:
    -
      name: id
      selector: id
    -
      name: date
      selector: mentionTime
    -
      name: comment
      selector: comment
    -
      name: rating
      selector: overallRating.value
      
  # Under 'ids', we identify source fields populated above which will uniquely
  # identify each imported item. The 'type' makes sure the migration map table
  # uses the proper schema type for stored the IDs.
  ids:
    id:
      type: integer

destination:
  plugin: 'entity_reference_revisions:paragraph'
  default_bundle: rating_comments

process:
  type:
    plugin: default_value
    default_value: rating_comments
  field_rating_comment_body: comment
  field_rating_comment_date: date
  field_rating_comment_id: id
  field_rating_comment_rating: rating
