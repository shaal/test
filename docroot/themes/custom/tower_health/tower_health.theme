<?php

/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

use Drupal\block\Entity\Block;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\NodeInterface;
use Drupal\core\entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\core\Url;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Component\Utility\Xss;
use Drupal\facets\Entity\Facet;

/**
 * Set page variables.
 */
function tower_health_preprocess_page(&$variables) {
  // Set the full width setting for any view page.
  $full_width_pages = [
    'view.find_a_location.find_location',
    'view.find_a_provider.find_doctor',
    'view.find_a_service.find_service',
    'view.article_listing.article_listing_page',
    'view.search.search_page',
    'entity.taxonomy_term.canonical',
  ];

  // Get the current route name.
  $current_route_name = \Drupal::service('current_route_match')->getRouteName();

  // Set page template variables.
  if (in_array($current_route_name, $full_width_pages)) {
    $variables['page_header'] = TRUE;
    $variables['full_width'] = TRUE;
    $variables['page_content'] = TRUE;
  }
}

/**
 * Set basic page variables.
 */
function tower_health_preprocess_page__page(&$variables) {
  $node = $variables['node'];
  if ($node instanceof NodeInterface) {
    $type = $node->getType();

    if ($type == 'page') {
      $variables['show_side_nav'] = $node->field_basic_enable_nav->value;
    }
  }
}

/**
 *
 */
function tower_health_preprocess_facets_item_list(&$variables) {
  $facet = $variables['facet'];

  if (!empty($facet) && $facet instanceof Facet) {
    $variables['attributes']['data-active-facets'] = implode(";", $facet->getActiveItems());
  }
}

/**
 * Remove variables from exposed location search form.
 *
 * {@inheritdoc}
 */
function tower_health_preprocess_block__facets(&$variables, $hook) {
  $content = $variables['content'];

  // Get rid of the container element if empty.
  if (isset($content[0]['#type']) && $content[0]['#type'] == 'container') {
    $variables['content'] = $content[0][0];
  }
}

/**
 * Alter proximity block for location search.
 *
 * {@inheritdoc}
 */
function tower_health_preprocess_block__locationproximityfilter(&$variables, $hook) {
  if (array_key_exists('location_latlon', $variables['content']['exposed_form'])) {
    unset($variables['content']['exposed_form']['location_latlon']['value']['#field_prefix']);
    $variables['content']['exposed_form']['location_latlon']['value']['#attributes']['placeholder'] = '000000';
    $variables['content']['exposed_form']['location_latlon']['value']['#title'] = t('Zip Code');

    $distance = $variables['content']['exposed_form']['location_latlon']['distance'];

    unset($distance['from']['#field_prefix']);
    $distance['from']['#title'] = t('Distance');

    unset($variables['content']['exposed_form']['location_latlon']['distance']);
    $variables['content']['exposed_form']['location_latlon']['distance'] = $distance;
  }
  if (array_key_exists('submit', $variables['content']['exposed_form']['actions'])) {
    $variables['content']['exposed_form']['actions']['submit']['#value'] = 'Apply';
    $variables['content']['exposed_form']['actions']['submit']['#attributes']['class'][] = 'element-invisible';
  }
  if (array_key_exists('location_latlon', $variables['content']['exposed_form'])) {
    $variables['content']['exposed_form']['location_latlon']['value']['#attributes']['class'] = ['js-set-my-location'];
    $variables['content']['exposed_form']['location_latlon']['distance']['#attributes']['class'] = ['js-set-my-radius'];
  }
}

/**
 * Adds a body class by role.
 */
function tower_health_preprocess_html(&$variables) {
  foreach ($variables['user']->getRoles() as $role) {
    $variables['attributes']['class'][] = 'role-' . $role;
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function tower_health_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Adds node title to paragraphs.
 */
function tower_health_preprocess_paragraph__basic_header(&$variables) {
  $node = \Drupal::request()->attributes->get('node');
  $variables['node_title'] = $node->getTitle();
}


/**
 * Adds node title to paragraphs.
 */
function tower_health_preprocess_paragraph__large_hero(&$variables) {
  $node = \Drupal::request()->attributes->get('node');
  $variables['node_title'] = $node->getTitle();
}


/**
 * Provide icon variable for rating comments paragraph.
 */
function tower_health_preprocess_paragraph__image_teaser_banner(&$variables) {
  $paragraph = $variables['paragraph'];
  $link_field = $paragraph->field_image_banner_links;
  $links = [];
  foreach ($link_field as $id => $link) {
    $links[$id]['text'] = $link->title;
    $links[$id]['url'] = Url::fromUri($link->uri);
  }
  $variables['links'] = $links;
}

/**
 * Get the width of the image displayed.
 */
function tower_health_preprocess_media__image(&$variables) {
  $media = $variables['media'];
  $view_mode = $variables['view_mode'];

  if ($view_mode == 'inline' && $media instanceof EntityInterface) {
    $image = $media->get('field_media_image')->getValue();

    if (reset($image)['width'] > 900) {
      $variables['attributes']['class'][] = 'figure--inline-mobile-full-width';
    }
  }
}

/**
 * Load the utility menu into a variable.
 */
function tower_health_preprocess_menu(&$variables) {
  $utility_nav_block = Block::load('tower_health_utility');
  $utility_nav_block_view = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($utility_nav_block);
  if ($utility_nav_block_view) {
    $variables['utility_nav'] = $utility_nav_block_view;
  }
}

/**
 * Alter proximity block for provider search.
 *
 * {@inheritdoc}
 */
function tower_health_preprocess_block__providerproximityfilter(&$variables, $hook) {
  if (array_key_exists('submit', $variables['content']['exposed_form']['actions'])) {
    $variables['content']['exposed_form']['actions']['submit']['#value'] = 'Apply';
    $variables['content']['exposed_form']['actions']['submit']['#attributes']['class'][] = 'element-invisible';
  }
  if (array_key_exists('provider_location_latlong', $variables['content']['exposed_form'])) {
    $variables['content']['exposed_form']['provider_location_latlong']['value']['#attributes']['class'] = ['js-set-my-location'];
    $variables['content']['exposed_form']['provider_location_latlong']['distance']['#attributes']['class'] = ['js-set-my-radius'];

    unset($variables['content']['exposed_form']['provider_location_latlong']['value']['#field_prefix']);
    $variables['content']['exposed_form']['provider_location_latlong']['value']['#attributes']['placeholder'] = '000000';
    $variables['content']['exposed_form']['provider_location_latlong']['value']['#title'] = t('Zip Code');

    $distance = $variables['content']['exposed_form']['provider_location_latlong']['distance'];

    unset($distance['from']['#field_prefix']);
    $distance['from']['#title'] = t('Distance');

    unset($variables['content']['exposed_form']['provider_location_latlong']['distance']);
    $variables['content']['exposed_form']['provider_location_latlong']['distance'] = $distance;
  }
}

/**
 * Alter title block.
 *
 * {@inheritdoc}
 */
function tower_health_preprocess_block__page_title_block(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $variables['node_title'] = $node->title->value;
  }
}

/**
 * Add region theme suggestions.
 */
function tower_health_theme_suggestions_region_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'region__' . $variables['elements']['#region'] . '__' . $node->bundle();
  }
}

/**
 * Add breadcrumb theme suggestions.
 */
function tower_health_theme_suggestions_breadcrumb_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'breadcrumb__' . $node->bundle();
  }
}

/**
 * Set variables for sidebar first region.
 */
function tower_health_preprocess_region__sidebar_first(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node->bundle() == 'location') {
      $hide_doctor_link = FALSE;
      if (!$node->get('field_location_doctor_link')->isEmpty()) {
        $hide_doctor_link = $node->get('field_location_doctor_link')->getString();
      }

      if ($hide_doctor_link == FALSE) {
        $variables['location_providers_url'] = _tower_heath_format_location_provider_url($node);
        $variables['button_icon'] = drupal_get_path('theme', 'tower_health') . '/images/icons/th-find-provider.svg';
      }
    }
  }
}

/**
 * Provide variables for provider teaser.
 */
function tower_health_preprocess_node__profile(&$variables) {
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];
  $variables['button_icon'] = drupal_get_path('theme', 'tower_health') . '/images/icons/th-cal.svg';
  $variables['rating_icon'] = drupal_get_path('theme', 'tower_health') . '/images/icons/star.svg';

  if ($node instanceof NodeInterface && $view_mode == 'teaser') {
    // Preprocess address.
    if ($node->hasField('field_location_ref') && !$node->get('field_location_ref')->isEmpty()) {
      $location_refs = $node->get('field_location_ref')->getValue();
      $locations = [];
      foreach ($location_refs as $id => $location) {
        $address = $node->field_location_ref[$id]->entity;
        if ($address instanceof EntityInterface && $address->hasField('field_location_address') && !$address->get('field_location_address')->isEmpty()) {
          $locality = $address->field_location_address->locality;
          $administrative_area = $address->field_location_address->administrative_area;
          $location = $locality . ", " . $administrative_area;
          if (!in_array($location, $locations)) {
            $locations[] = $location;
          }
        }
      }
      if ($location) {
        $variables['location'] = implode("; ", $locations);
      }
    }

    // Set the default appointment link.
    $variables['appointment_link'] = theme_get_setting('appointment_button_link');
    $variables['appointment_text'] = t('Request an Appointment');
    $variables['target'] = '_self';

    // Set appointment link.
    if ($node->hasField('field_profile_epic_id') && !$node->get('field_profile_epic_id')->isEmpty()) {
      if ($node->hasField('field_profile_scheduling') && !$node->get('field_profile_scheduling')->isEmpty()) {
        $open_scheduling = $node->get('field_profile_scheduling')->getValue();
        if ($open_scheduling[0]['value'] == 1) {
          $variables['appointment_link'] = 'https://mytowerhealth.org/mytowerhealth/openscheduling/signupandschedule/embeddedschedule?id=' . $node->get('field_profile_epic_id')->getString() . '&vt=1059';
          $variables['appointment_text'] = t('Make an Appointment Online');
          $variables['target'] = '_blank';
        }
      }
    }

    // Preprocess specialties.
    if ($node->hasField('field_medical_specialties_ref') && !$node->get('field_medical_specialties_ref')->isEmpty()) {
      $specialty_refs = $node->get('field_medical_specialties_ref')->getValue();
      $specialties = [];
      foreach ($specialty_refs as $id => $specialty) {
        $entity = $node->field_medical_specialties_ref[$id]->entity;
        if ($entity instanceof EntityInterface) {
          $tid = $entity->tid->value;
          $term = Term::load($tid);
          $name = $term->getName();
          $specialties[$id]['text'] = $name;
        }
      }
      if ($specialties) {
        $variables['specialties'] = $specialties;
      }
    }

    // Preprocess focuses.
    if ($node->hasField('field_area_interest_ref') && !$node->get('field_area_interest_ref')->isEmpty()) {
      $focus_refs = $node->get('field_area_interest_ref')->getValue();
      $focuses = [];
      foreach ($focus_refs as $id => $focus) {
        $entity = $node->field_area_interest_ref[$id]->entity;
        if ($entity instanceof EntityInterface) {
          $tid = $entity->tid->value;
          $term = Term::load($tid);
          $name = $term->getName();
          $focuses[$id]['text'] = $name;
        }
      }
      if ($focuses) {
        $variables['focuses'] = $focuses;
      }
    }

    // Preprocess languages.
    if ($node->hasField('field_profile_languages') && !$node->get('field_profile_languages')->isEmpty()) {
      $languages = $node->get('field_profile_languages')->getValue();
      $language_names = [];
      foreach ($languages as $id => $language) {
        $language_names[$id]['text'] = $language['value'];
      }
      if ($language_names) {
        $variables['languages'] = $language_names;
      }
    }

    if (!$node->get('field_profile_employment_type')->isEmpty()) {
      $list_type = $node->get('field_profile_employment_type')->getString();

      if ($list_type == 'independent') {
        $variables['employed_flag'] = t('Not employed by Tower Health');
      }
    }

    if ($node->hasField('field_profile_image') && !$node->get('field_profile_image')->isEmpty()) {
      $media = $node->field_profile_image->entity;
      if ($media instanceof EntityInterface && $media->hasField('field_media_image') && !$media->get('field_media_image')->isEmpty()) {
        $file = $media->field_media_image->entity;
        if ($file instanceof EntityInterface) {
          $url = $file->uri->value;
          $image = ImageStyle::load('teaser_image')->buildUrl($url);
          $variables['src'] = $image;
          $variables['alt'] = $media->field_media_image->alt;
        }
      }
    }
    else {
      // Fallback if no image uploaded.
      $variables['src'] = '/' . drupal_get_path('theme', 'tower_health') . '/images/people/provider-placeholder.png';
      $variables['alt'] = "Provider placeholder image";
    }
  }
  elseif ($node instanceof EntityInterface && $view_mode == 'page_header') {
    $variables['appointment_phone'] = theme_get_setting('appointment_phone_number');
    $variables['appointment_phone_label'] = theme_get_setting('appointment_phone_label');
    $variables['appointment_button_link'] = theme_get_setting('appointment_button_link');
    $variables['name'] = $node->title->value;
    if (!$node->get('field_profile_job_title')->isEmpty()) {
      $variables['lead_title'] = $node->field_profile_job_title->value;
    }
    if (!$node->get('field_profile_employment_type')->isEmpty()) {
      $list_type = $node->get('field_profile_employment_type')->getString();

      if ($list_type == 'independent') {
        $variables['employed_flag'] = t('Not employed by Tower Health');
      }
    }
    if (!$node->get('field_rating_overall')->isEmpty()) {
      $variables['rating'] = $node->field_rating_overall->value;
    }
    if (!$node->get('field_rating_comments_ref')->isEmpty()) {
      $variables['rating_comments'] = TRUE;
    }
    if (!$node->get('field_rating_count')->isEmpty()) {
      $variables['review_amt'] = $node->field_rating_count->value;
    }
    if ($node->hasField('field_profile_image') && !$node->get('field_profile_image')->isEmpty()) {
      $media = $node->field_profile_image->entity;
      if ($media instanceof EntityInterface && $media->hasField('field_media_image') && !$media->get('field_media_image')->isEmpty()) {
        $file = $media->field_media_image->entity;
        if ($file instanceof EntityInterface) {
          $url = $file->uri->value;
          $image = ImageStyle::load('teaser_image')->buildUrl($url);
          $variables['src'] = $image;
          $variables['alt'] = $media->field_media_image->alt;
        }
      }
    }
    else {
      // Fallback if no image uploaded.
      $variables['src'] = '/' . drupal_get_path('theme', 'tower_health') . '/images/people/provider-placeholder.png';
      $variables['alt'] = "Doctor placeholder image";
    }
  }
}

/**
 * Provide variables for location nodes.
 */
function tower_health_preprocess_node__service(&$variables) {
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];

  if ($node instanceof NodeInterface && $view_mode == 'sidebar_first') {
    $title = $node->getTitle();
    $provider_icon = drupal_get_path('theme', 'tower_health') . '/components/images/icons/th-find-provider.svg';
    $location_icon = drupal_get_path('theme', 'tower_health') . '/components/images/icons/th-find-hospital.svg';
    $cta_list = [];

    if ($node->hasField('field_conditions_ref') && !$node->get('field_conditions_ref')->isEmpty()) {
      $url = Url::fromRoute('view.find_a_provider.find_doctor', ['providers[0]' => 'service:' . strtolower($title)]);
      $cta_list[] = [
        'text' => t('@title Providers', ['@title' => $title]),
        'url' => $url,
        'icon' => $provider_icon,
      ];
    }

    $url = Url::fromRoute('view.find_a_location.find_location', ['f[0]' => 'services:' . strtolower($title)]);
    $cta_list[] = [
      'text' => t('@title Locations', ['@title' => $title]),
      'url' => $url,
      'icon' => $location_icon,
    ];

    $variables['cta_list'] = $cta_list;
  }

  if ($node instanceof NodeInterface && $view_mode == 'teaser') {
    if ($node->hasField('field_conditions_ref') && !$node->get('field_conditions_ref')->isEmpty()) {
      $condition_refs = $node->get('field_conditions_ref')->getValue();
      $conditions = [];
      foreach ($condition_refs as $id => $condition) {
        $entity = $node->field_conditions_ref[$id]->entity;
        if ($entity instanceof EntityInterface) {
          $tid = $entity->tid->value;
          $term = Term::load($tid);
          $name = $term->getName();
          $conditions[$id] = $name;
        }
      }
      if ($conditions) {
        $variables['related_conditions'] = $conditions;
      }
    }
  }
}

/**
 * Provide variables for location teaser.
 */
function tower_health_preprocess_node__location(&$variables) {
  $node = $variables['node'];
  $view_mode = $variables['view_mode'];
  $variables['button_icon'] = drupal_get_path('theme', 'tower_health') . '/images/icons/th-find-hospital.svg';
  $appointment_phone = theme_get_setting('appointment_phone_number');
  $appointment_phone_label = theme_get_setting('appointment_phone_label');

  if ($node instanceof NodeInterface && $view_mode == 'teaser_small') {
    $variables['location_providers_url'] = _tower_heath_format_location_provider_url($node);
    _tower_heath_format_location_address($node, $variables);

    // Setup phone numbers.
    // Preprocess phone numbers.
    if ($node->hasField('field_location_phone_number') && !$node->get('field_location_phone_number')->isEmpty()) {
      $variables['phone'] = $node->field_location_phone_number->value;
    }
    if ($node->hasField('field_location_fax') && !$node->get('field_location_fax')->isEmpty()) {
      $variables['fax'] = $node->field_location_fax->value;
    }
  }
  if ($node instanceof NodeInterface && $view_mode == 'teaser') {
    // Preprocess image variables.
    $media = $node->field_location_image->entity;
    if ($media instanceof EntityInterface && $media->hasField('field_media_image') && !$media->get('field_media_image')->isEmpty()) {
      $file = $media->field_media_image->entity;
      if ($file instanceof EntityInterface) {
        $url = $file->uri->value;
        $image = ImageStyle::load('teaser_image')->buildUrl($url);
        $variables['src'] = $image;
        $variables['alt'] = $media->field_media_image->alt;
      }
    }
    else {
      // Fallback if no image uploaded.
      $variables['src'] = drupal_get_path('theme', 'tower_health') . '/images/people/provider-placeholder.png';
      $variables['alt'] = "Location placeholder image";
    }
    if ($node->hasField('field_location_hours') && !$node->get('field_location_hours')->isEmpty()) {
      $variables['hours'] = TRUE;
    }

    // Preprocess address variables.
    _tower_heath_format_location_address($node, $variables);

    // Preprocess phone numbers.
    if ($node->hasField('field_location_phone_number') && !$node->get('field_location_phone_number')->isEmpty()) {
      $variables['phone'] = $node->field_location_phone_number->value;
    }
    if ($node->hasField('field_location_fax') && !$node->get('field_location_fax')->isEmpty()) {
      $variables['fax'] = $node->field_location_fax->value;
    }
  }
  elseif ($node instanceof EntityInterface && $view_mode == 'page_header') {
    $variables['rating_icon'] = drupal_get_path('theme', 'tower_health') . '/images/icons/star.svg';
    $variables['name'] = $node->title->value;

    if (!$node->get('field_location_type')->isEmpty()) {
      $term = Term::load($node->field_location_type->entity->tid->value);
      $name = $term->getName();
      $variables['type'] = $name;
    }

    $variables['address_1'] = $node->field_location_address->address_line1;
    $variables['address_2'] = $node->field_location_address->address_line2;
    $variables['address_local'] = $node->field_location_address->locality . ', ' . $node->field_location_address->administrative_area . ' ' . $node->field_location_address->postal_code;

    if ($node->hasField('field_location_image') && !$node->get('field_location_image')->isEmpty()) {
      $media = $node->field_location_image->entity;
      if ($media instanceof EntityInterface && $media->hasField('field_media_image') && !$media->get('field_media_image')->isEmpty()) {
        $file = $media->field_media_image->entity;
        if ($file instanceof EntityInterface) {
          $url = $file->uri->value;
          $image = ImageStyle::load('location_header_image')->buildUrl($url);
          $variables['src'] = $image;
          $variables['alt'] = $media->field_media_image->alt;
        }
      }
    }

    // Setup phone numbers.
    $phones = [];
    $phone = $node->field_location_phone_number->value;
    if (!empty($phone)) {
      $phones[] = [
        'label' => t('Main'),
        'numbers' => [
          [
            'number' => $phone,
            'label' => $phone,
          ],
        ],
      ];
    }
    $phones[] = [
      'label' => t('Appointments'),
      'numbers' => [
        [
          'number' => $appointment_phone,
          'label' => $appointment_phone_label,
        ],
      ],
    ];
    $variables['phones'] = $phones;

    // Preprocess other providers link.
    $variables['location_providers_url'] = _tower_heath_format_location_provider_url($node);

    _tower_heath_format_location_address($node, $variables);
  }
}

/**
 * Function for returning a location's address for the templates.
 */
function _tower_heath_format_location_provider_url($node) {
  $location_title = $node->title->value;
  $location_id = $node->field_location_id->value;
  $location_providers_url = Url::fromRoute('view.find_a_provider.find_doctor', ['providers[0]' => 'location:' . $location_id, 'location-title' => $location_title]);

  return $location_providers_url;
}

/**
 * Function for returning a location's address for the templates.
 */
function _tower_heath_format_location_address($node, &$variables) {
  if (!$node instanceof EntityInterface && $node->bundle() !== 'location' && $node->hasField('field_location_address')) {
    return;
  }

  // Preprocess directions link.
  $locality = $node->field_location_address->locality;
  $administrative_area = $node->field_location_address->administrative_area;
  $postal_code = $node->field_location_address->postal_code;
  $address_1 = $node->field_location_address->address_line1;
  $address_2 = $node->field_location_address->address_line2;
  $address_localilty = $locality . ', ' . $administrative_area . ' ' . $postal_code;
  $href = "https://www.google.com/maps/place/" . str_replace(' ', '+', $address_1) . '+' . $locality . '+' . $administrative_area . '+' . $postal_code;

  $variables['address_1'] = $address_1;
  $variables['address_2'] = $address_2;
  $variables['address_local'] = $address_localilty;
  $variables['href'] = $href;
}

/**
 * Provide icon variable for rating comments paragraph.
 */
function tower_health_preprocess_paragraph__rating_comments(&$variables) {
  $variables['rating_icon'] = drupal_get_path('theme', 'tower_health') . '/images/icons/star.svg';
}

/**
 * Provide variables for profile comments field.
 */
function tower_health_preprocess_field__field_rating_comments_ref(&$variables) {
  $variables['rating_icon'] = drupal_get_path('theme', 'tower_health') . '/images/icons/star.svg';

  $rating = $variables['element']['#object']->field_rating_overall->value;
  $variables['rating'] = $rating;

  $count = $variables['element']['#object']->field_rating_count->value;
  $variables['count'] = $count;

  $reviews = [];
  foreach ($variables['items'] as $id => $item) {
    $paragraph = $item["content"]["#paragraph"];
    $reviews[$id]["review"] = strip_tags($paragraph->field_rating_comment_body->value);
    $reviews[$id]["rating"] = $paragraph->field_rating_comment_rating->value;
    $reviews[$id]["date"] = date("F Y", strtotime($paragraph->field_rating_comment_date->value));
  }

  $variables["review_url"] = theme_get_setting('reviews_link');

  $variables["reviews"] = $reviews;
}

/**
 * Provide variables for profile language field template.
 */
function tower_health_preprocess_field__field_profile_languages(&$variables) {
  $languages = [];
  foreach ($variables['items'] as $id => $language) {
    $language_name = $language['content']['#context']['value'];
    $languages[$id]['text'] = $language_name;
  }

  $variables['languages'] = $languages;
}

/**
 * Provide variables for profile phone field template.
 */
function tower_health_preprocess_field__field_profile_phone(&$variables) {
  $variables['phone'] = $variables['items'][0]['content']['#title'];
  $variables['url'] = $variables['items'][0]['content']['#url'];
}

/**
 * Provide variables for profile accepted insurance field template.
 */
function tower_health_preprocess_field__field_insurance_ref(&$variables) {
  $accepted_policies = [];

  foreach ($variables['items'] as $policy) {
    $insurance_entity = $policy['content']['#options']['entity'];
    if ($insurance_entity instanceof EntityInterface && $insurance_entity->hasField('field_insurance_company') && !$insurance_entity->get('field_insurance_company')->isEmpty()) {
      $values = $insurance_entity->get('field_insurance_company')->getValue();
      foreach ($values as $value) {
        $term = Term::load($value['target_id']);
        $name = $term->getName();
        if (!in_array($name, $accepted_policies)) {
          $accepted_policies[] = $name;
        }
      }
    }
  }
  sort($accepted_policies);
  $variables['policies'] = $accepted_policies;
}

/**
 * Provide variables for profile affiliations field template.
 */
function tower_health_preprocess_field__field_affiliations_ref(&$variables) {
  $affiliations = [];
  foreach ($variables['items'] as $id => $affiliation) {
    $affiliations[$id]['text'] = $affiliation['content'];
  }
  $variables['affiliations'] = $affiliations;
}

/**
 * Provide variables for profile specialties field template.
 */
function tower_health_preprocess_field__field_medical_specialties_ref(&$variables) {
  $specialties = [];
  foreach ($variables['items'] as $id => $specialty) {
    $specialties[$id]['text'] = $specialty['content'];
  }
  $variables['specialties'] = $specialties;
}

/**
 * Provide variables for profile focus field template.
 */
function tower_health_preprocess_field__field_area_interest_ref(&$variables) {
  $focuses = [];
  foreach ($variables['items'] as $id => $focus) {
    $focuses[$id]['text'] = $focus['content'];
  }
  $variables['focuses'] = $focuses;
}

/**
 * Provide variables for profile certifications field template.
 */
function tower_health_preprocess_field__field_profile_board_certified(&$variables) {
  $certifications = [];
  foreach ($variables['items'] as $id => $certification) {
    $certifications[$id]['title'] = $certification['content'];
  }
  $variables['certifications'] = $certifications;
}

/**
 * Provide variables for profile education field template.
 */
function tower_health_preprocess_field__field_profile_education(&$variables) {
  $educations = [];
  foreach ($variables['items'] as $id => $education) {
    $paragraph = $education['content']['#paragraph'];
    $educations[$id]['title'] = $paragraph->field_education_institution_ref->entity->name->value;
    $educations[$id]['text'] = $paragraph->field_education_type->value;
  }
  $variables['educations'] = $educations;
}

/**
 * Provide variables for location hours field template.
 */
function tower_health_preprocess_field__field_location_hours(&$variables) {
  $hours = [];
  foreach ($variables['items'] as $hour) {
    foreach ($hour['content']['#office_hours'] as $id => $daily) {
      $hours[$id]['title'] = $daily['label'];
      $hours[$id]['hours'] = $daily['formatted_slots'];
    }
  }
  $variables['hours'] = $hours;
}

/**
 * Provide variables for location services template.
 */
function tower_health_preprocess_field__field_services_ref(&$variables) {
  $services = [];
  foreach ($variables['items'] as $id => $service) {
    $services[$id]['text'] = $service['content'];
  }
  $variables['services'] = $services;
}

/**
 * Provide variables for location services template.
 */
function tower_health_preprocess_paragraph__care_circle(&$variables) {
  $paragraph = $variables['paragraph'];
  $field_name = $paragraph->parent_field_name->value;
  if ($field_name == 'field_basic_components' || $field_name == 'field_location_components' || $field_name == 'field_service_flex') {
    $variables['fullWidth'] = TRUE;
  }
  $circle_refs = $paragraph->field_circle_section_ref->getValue();
  $items = [];
  foreach ($circle_refs as $id => $circle) {
    $entity = Paragraph::load($circle['target_id']);
    $items[$id]['label'] = $entity->field_care_circle_section_title->value;
    $items[$id]['color'] = $entity->field_care_circle_section_color->value;
    if ($entity->field_care_circle_section_link->uri != NULL) {
      $items[$id]['url'] = Url::fromUri($entity->field_care_circle_section_link->uri);
    }
    if (!$entity->field_care_circle_section_icon->isEmpty()) {
      $items[$id]['icon'] = file_create_url($entity->field_care_circle_section_icon->entity->field_media_file->entity->uri->value);
      $items[$id]['icon_alt'] = $entity->field_care_circle_section_icon->entity->field_media_file->entity->alt;
    }
  }
  $variables['items'] = $items;
}

/**
 * Alter views.
 */
function tower_health_preprocess_views_view(&$variables) {
  $id = $variables['id'];

  if ($id == 'find_a_provider') {
    $facets = \Drupal::request()->get('providers');
    if ($facets and is_array($facets)) {
      foreach ($facets as $i => $facet) {
        $arr = explode(':', $facet);
        if ($arr[0] == 'service') {
          $placeholder = ucwords($arr[1]);
          $variables['result_appendix'] = t("for <strong>@service</strong> Doctors", ["@service" => $placeholder]);
        }
      }
    }

    $location_title = \Drupal::request()->get('location-title');
    if (!empty($location_title)) {
      $variables['result_appendix'] = t("for Doctors at <strong>@location</strong>", ["@location" => $location_title]);
    }
  }
}

/**
 * Setup the pager to match prototype.
 */
function tower_health_preprocess_pager(&$variables) {
  if (!isset($variables['items'])) {
    return;
  }

  $items = $variables['items'];
  $current = $variables['current'];
  $route = \Drupal::routeMatch()->getCurrentRouteMatch();
  $route_name = $route->getRouteName();

  if ($route_name == 'view.find_a_location.find_location' && !empty($items)) {
    $search_term = Xss::filter(\Drupal::request()->get('find_location_search'));
    $facets = \Drupal::request()->get('f');
    $locations = \Drupal::request()->get('location_latlon');

    $params = [];

    if (!empty($search_term)) {
      $params['find_location_search'] = $search_term;
    }

    if ($locations and is_array($locations)) {
      $params['location_latlon[value]'] = $locations['value'];
      $params['location_latlon[distance][from]'] = $locations['distance']['from'];
    }

    if ($facets and is_array($facets)) {
      foreach ($facets as $i => $facet) {
        $facet_id = 'f[' . $i . ']';
        $params[$facet_id] = $facet;
      }
    }

    $items = _tower_health_pager_links($items, $route_name, $params, $current);
  }
  elseif ($route_name == 'view.find_a_provider.find_doctor' && !empty($items)) {
    $search_term = Xss::filter(\Drupal::request()->get('find_doctor_search'));
    $facets = \Drupal::request()->get('providers');
    $locations = \Drupal::request()->get('provider_location_latlong');

    $params = [];

    if (!empty($search_term)) {
      $params['find_doctor_search'] = $search_term;
    }

    if ($locations and is_array($locations)) {
      $params['provider_location_latlong[value]'] = $locations['value'];
      $params['provider_location_latlong[distance][from]'] = $locations['distance']['from'];
    }

    if ($facets and is_array($facets)) {
      foreach ($facets as $i => $facet) {
        $facet_id = 'providers[' . $i . ']';
        $params[$facet_id] = $facet;
      }
    }

    $items = _tower_health_pager_links($items, $route_name, $params, $current);
  }

  $variables['items'] = $items;
}

/**
 * Set up pager links to properly page.
 */
function _tower_health_pager_links($items, $route_name, $params, $current) {
  if (!is_array($items) || empty($route_name) || !is_array($params) || empty($current)) {
    return;
  }

  foreach ($items['pages'] as $i => $page) {
    $page_number = $i - 1;
    $route_params = $params;
    $route_params['page'] = $page_number;
    $items['pages'][$i]['href'] = Url::fromRoute($route_name, $route_params);
  }

  if (isset($items['previous'])) {
    $page_number = $current - 1;
    $route_params = $params;
    $route_params['page'] = $page_number;
    $items['previous']['href'] = Url::fromRoute($route_name, $route_params);
  }

  if (isset($items['next'])) {
    $page_number = $current;
    $route_params = $params;
    $route_params['page'] = $page_number;
    $items['next']['href'] = Url::fromRoute($route_name, $route_params);
  }

  return $items;
}
